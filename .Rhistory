total_pit_tft_diff  = pit_tft_diff * salary_or_wages_no
) %>%
select(1, 3:6, avg_sal_and_wage, bracket, number_of_individuals_no, pit_tft, pit_no_tft, pit_tft_diff, salary_or_wages, salary_or_wages_no, total_pit_tft, total_pit_no_tft, total_pit_tft_diff)
# Chunk 4: With and without the TFT
###########################################################################
###########################################################################
###                                                                     ###
###                THE TAX FREE THRESHOLD: PROGRESSIVITY                ###
###                                                                     ###
###########################################################################
###########################################################################
##--------------------------------------------------------------
##  How does the presence of the TFT affect Average Tax Rates?
##--------------------------------------------------------------
indiv_tax_stats %>%
group_by(bracket) %>%
summarise(
avg_tax_paid_with_tft = mean(pit_tft, na.rm = T),
avg_tax_paid_without_tft = mean(pit_no_tft, na.rm = T)
)
avg_rates_data <- tibble(
income = seq(from = 1, to = 200000, by = 100),
pit_with_tft = case_when(
income <= 18200  ~ 0,
income <= 37000  ~ ((income - 18201) * 0.1900),
income <= 90000  ~ ((income - 37001) * 0.3250) + 3572,
income <= 180000 ~ ((income - 90001) * 0.3700) + 20797,
TRUE ~ ((income - 180001) * 0.4500) + 54097),
pit_without_tft = case_when(
income <= 37000 ~ (income * 0.1900),
income <= 90000 ~ ((income - 37001) * 0.3250) + 7030,
income <= 180000 ~ ((income - 90001) * 0.3700) + 24255,
TRUE ~ ((income - 180001) * 0.4500) + 57555),
ATR_with_tft    = pit_with_tft / income,
ATR_without_tft = pit_without_tft / income
)
# Chunk 5: Historical TFT web scrape
##################################################################
##  Scraping data on historical TFT rates from the ATO website  ##
##################################################################
tft_history_ato_web_scrape <- tibble(
years = read_html('https://www.ato.gov.au/Rates/Individual-income-tax-for-prior-years/') %>%
html_nodes(xpath = '//*[(@id = "content-main-wrap")]//h3') %>%
html_text(),
"Income Threshold" = read_html('https://www.ato.gov.au/Rates/Individual-income-tax-for-prior-years/') %>%
html_nodes(xpath = '//tr[(((count(preceding-sibling::*) + 1) = 2) and parent::*)]//td[(((count(preceding-sibling::*) + 1) = 1) and parent::*)]//p') %>%
html_text() %>%
str_extract_all(pattern = "(?<=\\$)\\d\\d?,\\d{3}") %>%
str_remove_all(",") %>%
as.numeric()
) %>%
mutate(
"Real Threshold" = `Income Threshold` * 1.03^(as.numeric(rownames(.)) - 1),
years            = recode(years, "1999–2000" = "1999-00")
) %>%
gather(key = measure, value = "TFT Threshold", -years)
# Chunk 6: ABS household deflator
## The PIT schedule that is scraped later in this script provides nominial values
## The Household Consumption Deflator has been chosen to convert historical PIT rates to current prices
# Downloads yearly implicit price deflators (5204.0 - Table 4)
target_def = "https://www.abs.gov.au/AUSSTATS/ABS@ARCHIVE.NSF/log?openagent&5204004_expenditure_on_gdp_ipd.xls&5204.0&Time%20Series%20Spreadsheet&D94B4121516C4490CA258331000C3B8A&0&2017-18&26.10.2018&Latest"
dest_def = '6204_table_4_def.xls'
download.file(url = target_def, destfile = dest_def, mode='wb')
household_exp_deflator <- read_excel(path = "./6204_table_4_def.xls", sheet = "Data1", skip = 9) %>%
clean_names() %>%
select(series_id, a2420886c) %>%
rename(year = series_id, hh_exp_def = a2420886c)
household_exp_deflator <- household_exp_deflator[as.numeric(strftime(household_exp_deflator$year, "%Y")) %in% 2018:1984,] %>%
mutate(
joining_year = substring(.$year, 0, 4),
hh_exp_def = hh_exp_def/100
)
##
# Chunk 7: All historical PITs scrape
## Scrapping the data on historical tax rates from the ATO website
## Mutates the PIT schedule data to include inflation adjusted PIT threshold amounts
##
url <- "https://www.ato.gov.au/Rates/Individual-income-tax-for-prior-years/"
pit_sch <- url %>%
read_html() %>%
html_table() %>%
setNames(., url %>%
read_html() %>%
html_nodes("caption") %>%
html_text()) %>%
map(. %>%
mutate(`Tax on this income` = gsub(",", "", `Tax on this income`),
cumm_tax_amt = str_extract(`Tax on this income`, "(?<=^\\$)\\d+") %>% as.numeric(),
tax_rate = str_extract(`Tax on this income`, "\\d+.(\\d+)?(?=(\\s+)?c)") %>% as.numeric(),
threshold = str_extract(`Tax on this income`, "(?<=\\$)\\d+$") %>% as.numeric()
)
) %>%
map(~drop_na(.x, threshold)) %>%
map(function(x) { mutate_each(x, funs(replace(., is.na(.), 0))) }) %>%
#
# Mutation of dataset to include inflation adjusted thresholds begins here
#
bind_rows(., .id = "id") %>%
mutate(
id  = str_replace(.$id, ".*(\\d{2})\\d{2}-(\\d{2})", "\\1\\2") %>% recode(., "192000" = "2000")
) %>%
nest(-id) %>%
left_join(household_exp_deflator, by = c("id" = "joining_year")) %>%
select(-year) %>%
unnest() %>%
mutate(
real_threshold = threshold / hh_exp_def,
real_cumm_tax_amt = cumm_tax_amt / hh_exp_def
) %>%
split(.$id)
##
## Establishing an income variable against which taxable income would be calculated
income <- seq(from = 1, to = 100000, by = 100)
#Define a function for calculating taxable income each year based upon nominal thresholds
nominial_tax_calc <- function(data, income) {
i <-tail(which(income >= data[, 7]), 1)
if (length(i) > 0)
return(tibble(income_N = income,
tax_N = as.numeric((income - data[i, 7]) * (data[i, 6] / 100) + data[i, 5])))
else
return(tibble(income_N = income, tax_N = 0))
}
#
# As above but for for thresholds calculated in inflation adjusted (real) terms
real_tax_calc <- function(data, income) {
i <-tail(which(income >= data[, 8]), 1)
if (length(i) > 0)
return(tibble(income_R = income,
tax_R = as.numeric((income - data[i, 8]) * (data[i, 6]/100) + data[i, 9])))
else
return(tibble(income_R = income, tax_R = 0))
}
##
## Applying above functions to the PIT schdule data scrapped from the ATO website (above)
# Tax payable based on nominal thresholds
nom_tax_payable <- map(pit_sch,~map_df(income, nominial_tax_calc, data = .)) %>%
bind_rows(.id = 'id')
# As above, based on real thresholds
rel_tax_payable <- map(pit_sch,~map_df(income, real_tax_calc, data = .)) %>%
bind_rows(.id = 'id')
##
## Join real and nominial datasets then mutate to calculate nominal and real average tax rates
## before assigning the relevant decade to each obs
hist_taxable_income <- left_join(rel_tax_payable, nom_tax_payable, by = c("id" = "id", "income_R" = "income_N")) %>%
mutate(
real_atr = tax_R / income,
nominal_atr = tax_N / income
) %>%
rename(year_ending = id, income = income_R) %>%
nest(-year_ending) %>%
arrange(desc(year_ending)) %>%
mutate(
decade = c(rep("2010's", times = 7), rep("2000's", times = 10), rep("1990's", times = 10), rep("1980's", times = 7))
) %>%
unnest()
##
p2_real_atr_decade_chart <- ggplot(data = hist_taxable_income, aes(x = income, y = real_atr, colour = year_ending)) +
geom_line() +
facet_wrap(vars(decade)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous(labels = scales::dollar) +
theme_light() +
labs(
y = "",
x = "",
title = "Average personal income tax rates",
subtitle = "1983-84 to 2016-17",
caption = "Source: Tax Framework Division"
) +
theme(
panel.grid = element_blank(),
panel.grid.major.y = element_line(colour = "grey80", linetype = "dashed"),
axis.text.x = element_text(angle = 90, vjust = 0.4, hjust = 1)
)
# Chunk 8: historical_TFT_rate
ggplot(data = tft_history_ato_web_scrape, aes(x = years, y = `TFT Threshold`, colour = measure)) +
geom_point() +
geom_text(aes(x = 5, y = 14000), label = "TFT\n(real terms)", size = 2.2, colour = "#440154FF") +
geom_text(aes(x = 4, y = 7000), label = "TFT\n(nominal terms)", size = 2.2, colour = "#21908CFF") +
scale_y_continuous(labels = scales::dollar) +
theme_light() +
labs(
y = "",
x = ""
) +
theme(
panel.grid = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.4, size = 6),
axis.text.y = element_text(size = 6),
legend.position = "none"
) +
scale_colour_manual(values=c("#21908CFF", "#440154FF"))
# Chunk 9
ggplot(data = hist_taxable_income, aes(x = income, y = real_atr, colour = year_ending)) +
geom_line() +
#facet_wrap(vars(decade)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous(labels = scales::dollar) +
theme_light() +
labs(
y = "",
x = "",
title = "Down, down. Prices are down...",
subtitle = "Real average personal income tax rates 1983-84 to 2016-17",
caption = "Source: Tax Framework Division"
) +
theme(
panel.grid = element_blank(),
panel.grid.major.y = element_line(colour = "grey80", linetype = "dashed"),
axis.text.x = element_text(angle = 90, vjust = 0.4, hjust = 1),
legend.title = element_blank()
)
# Chunk 10: taxpayer_by_bracket
indiv_tax_stats %>%
filter(income_year == "2016–17") %>%
group_by(bracket) %>%
tally(number_of_individuals_no, name = "tax_payers") %>%
ggplot(aes(x = bracket, y = tax_payers, fill = bracket)) +
geom_col() +
geom_text(
aes(label = format(tax_payers, big.mark = ","), colour = bracket, y = tax_payers + 10000),
vjust = -0.5,
size = 3
) +
scale_y_continuous(scales::comma, expand = expand_scale(mult = c(0, 0.1))) +
labs(
x = "",
y = "",
title = "",
caption = "Source: Tax Stats (2017) - Individuals table 2B"
) +
theme_light() +
theme(
legend.position = 'none',
panel.grid =  element_blank(),
panel.grid.major.x = element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
panel.border = element_blank(),
axis.line.x = element_line(colour = "grey80")
)
# Chunk 11
knitr::kable(x =
indiv_tax_stats %>%
group_by(bracket) %>%
summarise(
avg_tax_paid_with_tft = mean(pit_tft, na.rm = T),
avg_tax_paid_without_tft = mean(pit_no_tft, na.rm = T)
),
digits = 0,
format.args = c(big.mark = ","),
col.names = c("Tax Bracket", "with TFT", "without TFT")
)
# Chunk 12: fig-one
avg_rates_data %>%
select(
income,
ATR_with_tft,
ATR_without_tft
) %>%
gather(key = ATR, value = value, - income) %>%
mutate(ATR_label = case_when(income == 100001 & ATR == "ATR_with_tft" ~ "with TFT",
income == 125001 & ATR == "ATR_without_tft" ~ "without TFT",
TRUE ~ NA_character_)
) %>%
ggplot(aes(x = income, y = value, colour = ATR)) +
geom_hline(yintercept = 0, colour = "black") +
geom_line(size = 1.5) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), expand = expand_scale(c(0, 0.1))) +
scale_x_continuous(labels = scales::dollar, expand = expand_scale(c(0, 0))) +
theme_light() +
labs(
x = "",
y = "",
title = "",
caption = "Source: Tax Framework Division"
) +
theme(
legend.position = 'none'
) +
geom_text(aes(x = 120000, y = 0.325), label = "Without TFT", size = 3, colour = "#440154FF") +
geom_text(aes(x = 150000, y = 0.25), label = "With TFT", size = 3, colour = "#21908CFF") +
scale_colour_manual(values=c("#21908CFF", "#440154FF"))
# Chunk 13
##################################################################
##          How much income would need to be returned?          ##
##################################################################
indiv_tax_stats %>%
group_by(income_year, bracket) %>%
summarise(
"Total Additional Tax" = sum(total_pit_tft_diff/1000000000, na.rm = TRUE)
) %>%
ggplot(aes(x = bracket, y = `Total Additional Tax`, fill = bracket)) +
geom_col() +
geom_text(
aes(label  = format(round(`Total Additional Tax`, 1), big.mark = ","),
colour = bracket, fontface = "bold", y = `Total Additional Tax`),
vjust  = 0.25,
hjust  = -0.3,
size   = 3,
angle  = 90
) +
facet_grid(cols = vars(income_year)) +
scale_y_continuous(
labels = scales::dollar,
expand = expand_scale(mult = c(0, 0.2)),
breaks = c(10, 15, 20, 25)
) +
labs(
x = "",
y = "",
title = "Removing the Tax Free Threshold",
subtitle = "Additional revenue ($bn) collected by tax bracket over period 2010–11 to 2016–17",
caption = "Source: Tax Stats (2017) - Individuals table 2B"
) +
theme_light() +
theme(
legend.position = 'none',
axis.text.x = element_text(angle = 90, vjust = 0.4, hjust = 1, size = 8),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 8),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 10),
strip.text = element_text(size = 8)
)
# Chunk 14: OECD_data_PIT_schedules
## This function is called below to apply each PIT schedule to the variable "income"
## OUTPUT - Scalar: tax payable
##
oecd_atr_calc <- function(data, income) {
i <-tail(which(income >= data[, 4]), 1)
if (length(i) == 0 & data[[1,3]] != 0)  {
return(tibble(income = income,
tax = as.numeric(income * (data[1, 3]/100))))
} else if (length(i) > 0)  {
return(tibble(income = income,
tax = as.numeric((income - data[i, 4]) * (data[i, 5]/100) + data[i, 6])))
} else {
return(tibble(income = income, tax = 0))
}
}
## In order to normalise the PIT rate schedules for common plotting, the thresholds to which they apply
## will be converted to a common base (AUD).
##
## The following chunks download currency codes before joining them with the relevent OECD countries and
## finially downloading FX data to match.
##
# Downloads three digit country codes to match with FX data
country_code <- read_html("https://www.iban.com/currency-codes") %>%
html_table(fill = TRUE)
country_codes <- country_code[[1]] %>%
clean_names() %>%
as_tibble() %>%
select(country, code) %>%
mutate(
country = str_to_title(country)
)
## Download data on PIT schedules of OECD members
# site: https://stats.oecd.org/index.aspx?DataSetCode=TABLE_I1
#
oecd_PIT_schedules <- read_csv(file = "TABLE_I1_13062019043818530.csv") %>%
clean_names() %>%
filter(centgov_rates != "PERS_ALL_AMNT", centgov_rates != "TAX_CRED_AMNT", centgov_rates != "SURTAX_RATE", year == 2018) %>%
select(country, centgov_rates, value) %>%
arrange(country, centgov_rates) %>%
separate(centgov_rates, sep = "_", into = c("number", "type")) %>%
spread(type, value) %>%
left_join(country_codes, by = "country")  %>%
mutate(
code = case_when(
country == "Czech Republic" ~ "CZK",
country == "Korea" ~ "KRW",
country == "Netherlands" ~ "EUR",
country == "Slovak Republic" ~ "EUR",
country == "United Kingdom" ~ "GBP",
country == "United States" ~ "USD",
country == "Mexico" ~ "MXN",
country == "Switzerland" ~ "CHF",
TRUE ~ code
)
) %>%
distinct(country, number, MR, TH, code)
## Download and clean FX data using the three digit country codes
##
from <- unique(oecd_PIT_schedules$code)
to <- rep_len("USD", length.out = length(from))
fx_rates <- getQuote(paste0(from, to, "=X")) %>%
rownames_to_column(var = "code") %>%
clean_names() %>%
mutate(
code = str_extract(string = code, pattern = "\\w{3}"),
aud_terms = 1/last,
cross_aud_terms = 1.4477 / aud_terms
) %>%
select(code, cross_aud_terms)
oecd_PIT_liability <- left_join(oecd_PIT_schedules, fx_rates) %>%
group_by(country) %>%
mutate(
TH = TH * cross_aud_terms,
MR_1 = lead(MR),
intermediate_var = case_when(
MR =! 0 & number == "01" ~ TH * (MR /100),
MR == 0  ~ 0,
TRUE ~ (TH - lag(TH)) * (MR / 100)),
cumm_tax_amt = cumsum(intermediate_var)
) %>%
select(-intermediate_var, -code, - cross_aud_terms) %>%
drop_na() %>%
group_by(country) %>%
mutate(
intermediate_var = case_when(
MR =! 0 & number == "01" ~ TH * (MR /100),
MR == 0  ~ 0,
TRUE ~ (TH - lag(TH)) * (MR / 100)),
cumm_tax_amt = cumsum(intermediate_var)
) %>%
select(-intermediate_var) %>%
drop_na() %>%
ungroup() %>%
split(.$country) %>%
map(~map_df(income, oecd_atr_calc, data = .)) %>%
bind_rows(.id = 'country') %>%
group_by(country) %>%
mutate(
atr = tax / income
) %>%
ungroup()
oecd_tft_members <- filter(oecd_PIT_liability, income == 8001, atr == 0) %>%
select(country) %>%
left_join(oecd_PIT_liability, by = c("country" = "country"))
p_tft_members <- oecd_tft_members %>%
ggplot(aes(x = income, y = atr, colour = country)) +
geom_line() +
geom_text(data = subset(oecd_tft_members, income == max(income)), aes(label = country, x = Inf, y = atr, hjust = -0.1)) +
scale_colour_discrete(guide = 'none')  +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), expand = expand_scale(c(0, 0.1))) +
scale_x_continuous(labels = scales::dollar, expand = expand_scale(c(0, 0))) +
theme_light() +
theme(plot.margin = unit(c(1, 4.7, 1, 1), "lines")) +
labs(
title = "OECD TFT club members",
subtitle = "Average Tax Rates - PIT schdules in AUD terms",
caption = "Source: Tax Framework Division",
y = ""
)
gt <- ggplotGrob(p_tft_members)
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
p_tft_members <- oecd_tft_members %>%
ggplot(aes(x = income, y = atr, colour = country)) +
geom_line() +
geom_text(data = subset(oecd_tft_members, income == max(income)), aes(label = country, x = Inf, y = atr, hjust = -0.1)) +
scale_colour_discrete(guide = 'none')  +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), expand = expand_scale(c(0, 0.1))) +
scale_x_continuous(labels = scales::dollar, expand = expand_scale(c(0, 0))) +
theme_light() +
theme(plot.margin = unit(c(1, 4.7, 1, 1), "lines")) +
labs(
title = "OECD TFT club members",
subtitle = "Average Tax Rates - in AUD terms",
caption = "Source: Tax Framework Division",
y = ""
)
gt <- ggplotGrob(p_tft_members)
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
p_tft_members <- oecd_tft_members %>%
ggplot(aes(x = income, y = atr, colour = country)) +
geom_line() +
geom_text(data = subset(oecd_tft_members, income == max(income)), aes(label = country, x = Inf, y = atr, hjust = -0.1)) +
scale_colour_discrete(guide = 'none')  +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), expand = expand_scale(c(0, 0.1))) +
scale_x_continuous(labels = scales::dollar, expand = expand_scale(c(0, 0))) +
theme_light() +
theme(plot.margin = unit(c(1, 4.7, 1, 1), "lines")) +
labs(
title = "OECD TFT club members",
subtitle = "Average Tax Rates (AUD terms)",
caption = "Source: Tax Framework Division",
y = ""
)
gt <- ggplotGrob(p_tft_members)
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
oecd_PIT_schedules
oecd_PIT_schedules %>%  filter(country == "Sweden")
oecd_tft_non_members <- filter(oecd_PIT_liability, income == 8001, atr != 0) %>%
select(country) %>%
left_join(oecd_PIT_liability, by = c("country" = "country"))
p_tft_non_members <- oecd_tft_non_members %>%
ggplot(aes(x = income, y = atr, colour = country)) +
geom_line() +
geom_text_repel(data = subset(oecd_tft_non_members, income == max(income)), aes(label = country, x = Inf, y = atr, hjust = -0.1)) +
scale_colour_discrete(guide = 'none')  +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), expand = expand_scale(c(0, 0.1))) +
scale_x_continuous(labels = scales::dollar, expand = expand_scale(c(0, 0))) +
theme_light() +
#  theme(plot.margin = unit(c(1, 4.7, 1, 1), "lines")) +
labs(
title = "No TFT for us... OECD countries without TFT's",
subtitle = "Average Tax Rates - AUD terms",
caption = "Source: Tax Framework Division",
y = ""
)
gt_non_mem <- ggplotGrob(p_tft_non_members)
gt_non_mem$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt_non_mem)
